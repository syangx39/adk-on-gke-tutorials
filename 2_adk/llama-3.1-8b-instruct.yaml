apiVersion: apps/v1
kind: Deployment
metadata:
  name: meta-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meta-server
  template:
    metadata:
      labels:
        app: meta-server
        ai.gke.io/model: Llama-3-1-8B-Instruct
        ai.gke.io/inference-server: vllm
        examples.ai.gke.io/source: model-garden
    spec:
      containers:
      - name: inference-server
        image: vllm/vllm-openai:latest
        resources:
          requests:
            cpu: 8
            memory: 30Gi
            ephemeral-storage: 80Gi
            nvidia.com/gpu : 1
          limits:
            cpu: 8
            memory: 30Gi
            ephemeral-storage: 80Gi
            nvidia.com/gpu : 1
        args:
        - --host=0.0.0.0
        - --port=7080
        - --swap-space=16
        - --gpu-memory-utilization=0.9
        - --max-model-len=4096
        - --trust-remote-code
        - --model=meta-llama/Llama-3.1-8B-Instruct
        - --tensor-parallel-size=1
        - --max-num-seqs=2
        - --tool-call-parser=llama3_json
        - --enable-chunked-prefill
        - --enable-auto-tool-choice
        - --chat-template=/templates/tool_chat_template_llama3.1_json.jinja
        env:
        - name: MODEL_ID
          value: "meta-llama/Llama-3.1-8B-Instruct"
        - name: HUGGING_FACE_HUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: hf-secret
              key: hf_api_token
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /templates
          name: chat-templates
      volumes:
      - name: dshm
        emptyDir:
          medium: Memory
      - name: chat-templates
        configMap:
          name: llama-chat-templates
      nodeSelector:
        cloud.google.com/gke-accelerator: nvidia-l4
---
apiVersion: v1
kind: Service
metadata:
  name: meta-service
spec:
  selector:
    app: meta-server
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 7080
---
apiVersion: v1
kind: Secret
metadata:
  name: hf-secret
type: Opaque
stringData:
  hf_api_token: [replace this with your HF token]
---
# See: https://github.com/vllm-project/vllm/blob/main/examples/tool_chat_template_llama3.1_json.jinja
apiVersion: v1
kind: ConfigMap
metadata:
  name: llama-chat-templates
data:
  tool_chat_template_llama3.1_json.jinja: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {#- Llama 3.1 doesn't pass all tests if the tools are in the system prompt #}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- if strftime_now is defined %}
            {%- set date_string = strftime_now("%d %b %Y") %}
        {%- else %}
            {%- set date_string = "26 Jul 2024" %}
        {%- endif %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- if messages[0]['content'] is string %}
            {%- set system_message = messages[0]['content']|trim %}
        {%- else %}
            {%- set system_message = messages[0]['content'][0]['text']|trim %}
        {%- endif %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- if tools is not none %}
            {%- set system_message = "You are a helpful assistant with tool calling capabilities. Only reply with a tool call if the function exists in the library provided by the user. If it doesn't exist, just reply directly in natural language. When you receive a tool call response, use the output to format an answer to the original user question." %}
        {%- else %}
            {%- set system_message = "" %}
        {%- endif %}
    {%- endif %}

    {#- System message #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call. " }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. ' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- if messages[0]['content'] is string %}
                {%- set first_user_message = messages[0]['content']|trim %}
            {%- else %}
                {%- set first_user_message = messages[0]['content'] | selectattr('type', 'equalto', 'text') | map(attribute='text') | map('trim') | join('\n') %}
            {%- endif %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
        {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. ' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n' }}
            {%- if message['content'] is string %}
                {{- message['content'] | trim}}
            {%- else %}
                {%- for content in message['content'] %}
                    {%- if content['type'] == 'text' %}
                        {{- content['text'] | trim }}
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
            {{- '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {{- '{"name": "' + tool_call.name + '", ' }}
            {{- '"parameters": ' }}
            {{- tool_call.arguments | tojson }}
            {{- "}" }}
            {{- "<|eot_id|>" }}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is string %}
                {{- { "output": message.content } | tojson }}
            {%- else %}
                {%- for content in message['content']  %}
                    {%- if content['type']  == 'text' %}
                        {{- { "output": content['text']  } | tojson }}
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}
