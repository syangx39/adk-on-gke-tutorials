apiVersion: apps/v1
kind: Deployment
metadata:
  name: google-maps-mcp-server
  labels:
    app: google-maps-mcp-server
spec:
  replicas: 1 # Adjust as needed
  selector:
    matchLabels:
      app: google-maps-mcp-server
  template:
    metadata:
      labels:
        app: google-maps-mcp-server
    spec:
      containers:
      - name: google-maps-mcp-container
        image: mcp/google-maps # This is the official image name provided
        ports:
        - containerPort: 8080 # Assuming the MCP server runs on port 8080 by default, adjust if different
        env:
        - name: GOOGLE_MAPS_API_KEY
          value: AIzaSyDY53ybuu58HHj1VHScDR_IaOHtmDTbskY # Replace with your key or use a Kubernetes Secret
        # Add readiness and liveness probes as per your best practices
        # readinessProbe:
        #   httpGet:
        #     path: /health # Or appropriate health check endpoint for this MCP server
        #     port: 8080
        #   initialDelaySeconds: 5
        #   periodSeconds: 5
        # livenessProbe:
        #   httpGet:
        #     path: /health # Or appropriate health check endpoint for this MCP server
        #     port: 8080
        #   initialDelaySeconds: 15
        #   periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: google-maps-mcp-service
spec:
  selector:
    app: google-maps-mcp-server
  ports:
  - protocol: TCP
    port: 80 # Port the service will be available on within the cluster
    targetPort: 8080 # Port the container is listening on
  type: ClusterIP # Or LoadBalancer if you need external access, though likely not for MCP
