apiVersion: ray.io/v1
kind: RayService
metadata:
  name: llama-31-8b
spec:
  serveConfigV2: |
    applications:
    - name: llm
      route_prefix: /
      import_path: serve_chat_completion:model
      runtime_env:
        env_vars:
          MODEL_ID: "meta-llama/Llama-3.1-8B-Instruct"
          TENSOR_PARALLELISM: "2"
          MAX_MODEL_LEN: "2048"
          CHAT_TEMPLATE_PATH: "/templates/tool_chat_template_llama3.1_json.jinja"
          VLLM_ENABLE_AUTO_TOOL_CHOICE: "true"
          TOOL_PARSER_NAME: "llama3_json"
      deployments:
      - name: VLLMDeployment
        num_replicas: 1
        ray_actor_options:
          num_cpus: 2
          # num_gpus 
  rayClusterConfig:
    headGroupSpec:
      rayStartParams:
        dashboard-host: "0.0.0.0"
      template:
        metadata:
          labels:
            ai.gke.io: rayserve
        spec:
          serviceAccount: adk-ray-agent-sa
          volumes:
            - name: dshm
              emptyDir:
                medium: Memory
                sizeLimit: 8Gi
            - name: chat-templates
              configMap:
                name: llama-chat-templates
          containers:
            - name: ray-head
              image: us-central1-docker.pkg.dev/gke-ai-open-models/ray-repo/vllm-ray-service:latest
              resources:
                limits:
                  cpu: "2"
                  memory: "8Gi"
                  ephemeral-storage: "15Gi"
                requests:
                  cpu: "2"
                  memory: "8Gi"
                  ephemeral-storage: "15Gi"
              ports:
                  # Ray Global Control Store 
                  # Handles cluster metadata management, actor discovery, other control plane operations
                  # All Ray workers and drivers connect to this port
                - containerPort: 6379
                  name: gcs-server
                  # Ray Dashboard
                - containerPort: 8265
                  name: dashboard
                  # Ray Client server
                  # Enable remote connections to the Ray cluster. External clients can connect using: ray.init(address="ray://<host>:10001")
                - containerPort: 10001
                  name: client
                  # Ray Serve
                  # HTTP server for model server and inference requets
                - containerPort: 8000
                  name: serve
              env:
                - name: HUGGING_FACE_HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: hf-secret
                      key: hf_api_token
                - name: PYTHONPATH
                  value: "/app:${PYTHONPATH}"
              volumeMounts:
              - mountPath: /dev/shm
                name: dshm
              - mountPath: /templates
                name: chat-templates
                readOnly: true
    workerGroupSpecs:
      - replicas: 1
        minReplicas: 1  # Ensure at least one worker
        maxReplicas: 2
        groupName: gpu-group
        rayStartParams: {}
        template:
          metadata:
            labels:
              ai.gke.io: rayserve
          spec:
            nodeSelector:
              cloud.google.com/gke-accelerator: nvidia-l4
            serviceAccount: adk-ray-agent-sa
            volumes:
            - name: dshm
              emptyDir:
                medium: Memory
                sizeLimit: 8Gi
            - name: chat-templates
              configMap:
                name: llama-chat-templates
            containers:
              - name: llm
                image: us-central1-docker.pkg.dev/gke-ai-open-models/ray-repo/vllm-ray-service:latest
                env:
                  - name: HUGGING_FACE_HUB_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: hf-secret
                        key: hf_api_token
                  - name: PYTHONPATH
                    value: "/app:${PYTHONPATH}"
                resources:
                  limits:
                    cpu: "8"
                    memory: "25Gi"
                    nvidia.com/gpu: "2"
                  requests:
                    cpu: "8"
                    memory: "25Gi"
                    nvidia.com/gpu: "2"
                volumeMounts:
                - mountPath: /dev/shm
                  name: dshm
                - mountPath: /templates
                  name: chat-templates
                  readOnly: true
                readinessProbe:
                  exec:
                    command:
                      - bash
                      - -c
                      - wget -T 5 -q -O- http://localhost:52365/api/local_raylet_healthz | grep success
                  initialDelaySeconds: 300
                  periodSeconds: 30
                  timeoutSeconds: 90
                  failureThreshold: 15
                livenessProbe:
                  exec:
                    command:
                      - bash
                      - -c
                      - wget -T 5 -q -O- http://localhost:52365/api/local_raylet_healthz | grep success
                  initialDelaySeconds: 60
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 10
---
apiVersion: v1
kind: Secret
metadata:
  name: hf-secret
type: Opaque
stringData:
  hf_api_token: [replace this with your HF token]
---
# See: https://github.com/vllm-project/vllm/blob/main/examples/tool_chat_template_llama3.1_json.jinja
apiVersion: v1
kind: ConfigMap
metadata:
  name: llama-chat-templates
data:
  tool_chat_template_llama3.1_json.jinja: |
    {{- bos_token }}
    {%- if custom_tools is defined %}
        {%- set tools = custom_tools %}
    {%- endif %}
    {%- if not tools_in_user_message is defined %}
        {#- Llama 3.1 doesn't pass all tests if the tools are in the system prompt #}
        {%- set tools_in_user_message = true %}
    {%- endif %}
    {%- if not date_string is defined %}
        {%- if strftime_now is defined %}
            {%- set date_string = strftime_now("%d %b %Y") %}
        {%- else %}
            {%- set date_string = "26 Jul 2024" %}
        {%- endif %}
    {%- endif %}
    {%- if not tools is defined %}
        {%- set tools = none %}
    {%- endif %}

    {#- This block extracts the system message, so we can slot it into the right place. #}
    {%- if messages[0]['role'] == 'system' %}
        {%- if messages[0]['content'] is string %}
            {%- set system_message = messages[0]['content']|trim %}
        {%- else %}
            {%- set system_message = messages[0]['content'][0]['text']|trim %}
        {%- endif %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {%- if tools is not none %}
            {%- set system_message = "You are a helpful assistant with tool calling capabilities. Only reply with a tool call if the function exists in the library provided by the user. If it doesn't exist, just reply directly in natural language. When you receive a tool call response, use the output to format an answer to the original user question." %}
        {%- else %}
            {%- set system_message = "" %}
        {%- endif %}
    {%- endif %}

    {#- System message #}
    {{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
    {%- if tools is not none %}
        {{- "Environment: ipython\n" }}
    {%- endif %}
    {{- "Cutting Knowledge Date: December 2023\n" }}
    {{- "Today Date: " + date_string + "\n\n" }}
    {%- if tools is not none and not tools_in_user_message %}
        {{- "You have access to the following functions. To call a function, please respond with JSON for a function call. " }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. ' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
    {%- endif %}
    {{- system_message }}
    {{- "<|eot_id|>" }}

    {#- Custom tools are passed in a user message with some extra guidance #}
    {%- if tools_in_user_message and not tools is none %}
        {#- Extract the first user message so we can plug it in here #}
        {%- if messages | length != 0 %}
            {%- if messages[0]['content'] is string %}
                {%- set first_user_message = messages[0]['content']|trim %}
            {%- else %}
                {%- set first_user_message = messages[0]['content'] | selectattr('type', 'equalto', 'text') | map(attribute='text') | map('trim') | join('\n') %}
            {%- endif %}
            {%- set messages = messages[1:] %}
        {%- else %}
            {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
        {%- endif %}
        {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
        {{- "Given the following functions, please respond with a JSON for a function call " }}
        {{- "with its proper arguments that best answers the given prompt.\n\n" }}
        {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}. ' }}
        {{- "Do not use variables.\n\n" }}
        {%- for t in tools %}
            {{- t | tojson(indent=4) }}
            {{- "\n\n" }}
        {%- endfor %}
        {{- first_user_message + "<|eot_id|>"}}
    {%- endif %}

    {%- for message in messages %}
        {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
            {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\n\n' }}
            {%- if message['content'] is string %}
                {{- message['content'] | trim}}
            {%- else %}
                {%- for content in message['content'] %}
                    {%- if content['type'] == 'text' %}
                        {{- content['text'] | trim }}
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
            {{- '<|eot_id|>' }}
        {%- elif 'tool_calls' in message %}
            {%- if not message.tool_calls|length == 1 %}
                {{- raise_exception("This model only supports single tool-calls at once!") }}
            {%- endif %}
            {%- set tool_call = message.tool_calls[0].function %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {{- '{"name": "' + tool_call.name + '", ' }}
            {{- '"parameters": ' }}
            {{- tool_call.arguments | tojson }}
            {{- "}" }}
            {{- "<|eot_id|>" }}
        {%- elif message.role == "tool" or message.role == "ipython" %}
            {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
            {%- if message.content is string %}
                {{- { "output": message.content } | tojson }}
            {%- else %}
                {%- for content in message['content']  %}
                    {%- if content['type']  == 'text' %}
                        {{- { "output": content['text']  } | tojson }}
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- endfor %}
    {%- if add_generation_prompt %}
        {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
    {%- endif %}